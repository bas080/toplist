{"mappings":"ACEA,MAAM,EAAU,CACd,UAAU,CAAK,EACb,QAAQ,KAAK,CAAC,CAAC,qBAAqB,EAAE,EAAM,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAC7D,EACA,aACE,OAAO,IAAI,GAAG,IAAI,CAAC,SAAU,CAAK,EAChC,IAAK,IAAI,KAAQ,EAAO,OAAO,MAAM,CAAC,EACxC,EACF,CACF,EAEA,KAAK,gBAAgB,CAAC,QAAS,MAAO,CAAE,QAAA,CAAO,CAAE,IAC/C,GAAI,CACF,IAAM,EAAiB,MAAM,OAAO,KAAK,CAAC,GAE1C,GAAI,EAAgB,OAAO,EAE3B,OAAO,MAAM,MAAM,EACrB,CAAE,MAAO,EAAO,CAEd,MADA,QAAQ,KAAK,CAAC,eAAgB,GACxB,CACR,CACF,GAGA,KAAK,gBAAgB,CAAC,UAAW,AAAC,IAChC,CAAO,CAAC,EAAM,IAAI,CAAC,MAAM,CAAC,CAAC,EAC7B","sources":["<anon>","serviceWorker.js"],"sourcesContent":["const staticTopList = \"toplist-v1\";\nconst actions = {\n    undefined (event) {\n        console.error(`No action with name \"${event.data.action}\".`);\n    },\n    clearCache () {\n        caches.keys().then(function(names) {\n            for (let name of names)caches.delete(name);\n        });\n    }\n};\nself.addEventListener(\"fetch\", async ({ request })=>{\n    try {\n        const cachedResponse = await caches.match(request);\n        if (cachedResponse) return cachedResponse;\n        return await fetch(request);\n    } catch (error) {\n        console.error(\"Fetch error:\", error);\n        throw error;\n    }\n});\n// Listen for messages from clients\nself.addEventListener(\"message\", (event)=>{\n    actions[event.data.action](event);\n});\n\n//# sourceMappingURL=serviceWorker.js.map\n","const staticTopList = \"toplist-v1\";\n\nconst actions = {\n  undefined(event) {\n    console.error(`No action with name \"${event.data.action}\".`);\n  },\n  clearCache() {\n    caches.keys().then(function (names) {\n      for (let name of names) caches.delete(name);\n    });\n  },\n};\n\nself.addEventListener(\"fetch\", async ({ request }) => {\n  try {\n    const cachedResponse = await caches.match(request);\n\n    if (cachedResponse) return cachedResponse;\n\n    return await fetch(request);\n  } catch (error) {\n    console.error(\"Fetch error:\", error);\n    throw error;\n  }\n});\n\n// Listen for messages from clients\nself.addEventListener(\"message\", (event) => {\n  actions[event.data.action](event);\n});\n"],"names":["actions","undefined","event","console","error","data","action","clearCache","caches","keys","then","names","name","delete","self","addEventListener","request","cachedResponse","match","fetch"],"version":3,"file":"serviceWorker.js.map"}